syntax = "proto2";

package oj.backend;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

/*
 * all time are in unit of nanosecond
 * all memory are in unit of byte
 */

// How judge assert input
enum MatchRule {
  // exactly same
  ExactSame = 0;
  // assert segment between space or newline, empty segments are also compare
  IgnoreSNL = 1;
  // assert segment between space or newline, empty segments are ignored
  SkipSNL = 2;
}

// Search
enum SortBy {
  UploadDate = 0;
  ACRate = 1;
  SubmitCount = 2;
  Score = 3;
  Difficulty = 4;
  Rank = 5;
  UserCount = 6;
}

message Paginator {
  required string session = 1;
  required bool reverse = 2;
}

message ListRequest {
  // Parameters new list paginator
  message Create {
    required SortBy sort_by = 1;
    required bool reverse = 2;
  }
  oneof request {
    Create create = 1;
    Paginator pager = 2;
  }
  required uint64 size = 3;
}

message TextSearchRequest {
  oneof request {
    string text = 1;
    Paginator pager = 2;
  }
  required uint64 size = 3;
}

message Case {
  repeated bytes inputs = 1;
  repeated bytes outputs = 2;
}

message Testcases { repeated TestcaseId list = 1; }

// Submit

// I don't want to write docs
enum JudgeResultState {
  AC = 0;
  NA = 1;
  WA = 2;
  CE = 3;
  RE = 4;
  RF = 5;
  TLE = 6;
  MLE = 7;
  OLE = 8;
}

message SubmitId { required int32 id = 1; }

message Submits { repeated SubmitInfo list = 1; }

message SubmitUpload {
  required SubmitId id = 1;
  required bytes code = 2;
}

message SubmitInfo {
  required SubmitId id = 1;
  required google.protobuf.Timestamp upload_time = 3;
  required uint64 time = 4;
  required uint64 peak_mem = 5;
  required uint64 score = 6;
  required JudgeResult state = 7;
}

message JudgeResult {
  // assertion code
  required JudgeResultState status = 1;
  // the time in nanosecond
  optional uint64 max_time = 2;
  // the peak memory usage
  optional uint64 max_mem = 3;
}

message SubmitStatus {
  oneof task {
    // number of test case running(or finished)
    int32 case = 1;
    JudgeResult result = 2;
  }
}

message CreateSubmitRequest {
  message Info {
    required bytes code = 1;
    required ProblemId problem_id = 2;
  }
  required Info info = 1;
  required SubmitId id = 2;
  required ProblemId problem = 3;
  required string request_id = 4;
}

message RejudgeRequest {
  required SubmitId id = 1;
  required string request_id = 2;
}

service SubmitSet {
  rpc List(ListRequest) returns (Submits);
  rpc SearchByText(TextSearchRequest) returns (Submits);
  rpc Info(SubmitId) returns (SubmitInfo);

  rpc Create(CreateSubmitRequest) returns (SubmitId);
  rpc Remove(SubmitId) returns (google.protobuf.Empty);

  // are not guarantee to yield status
  rpc Follow(SubmitId) returns (stream SubmitStatus);
  rpc Rejudge(RejudgeRequest) returns (google.protobuf.Empty);
}

// Announcements
message AnnouncementId { required int32 id = 1; }

message AnnouncementInfo {
  required AnnouncementId id = 1;
  required string title = 2;
  required google.protobuf.Timestamp upload_date = 3;
}

message AnnouncementFullInfo {
  required AnnouncementInfo info = 1;
  required UserId author = 2;
  required string content = 3;
  required bool public = 4;
}

message ListAnnouncementResponse {
  repeated AnnouncementInfo list = 1;
  required string next_page_token = 2;
}

message AnnouncementLink {
  required AnnouncementId announcement_id = 1;
  required ContestId contest_id = 2;
}

message CreateAnnouncementRequest {
  message Info {
    required string title = 1;
    required string content = 2;
  }
  required Info info = 1;
  required string request_id = 2;
}

message UpdateAnnouncementRequest {
  message Info {
    optional string title = 1;
    optional string content = 2;
  }
  required Info info = 1;
  required AnnouncementId id = 2;
  required string request_id = 3;
}

service AnnouncementSet {
  rpc List(ListRequest) returns (ListAnnouncementResponse);
  rpc SearchByText(TextSearchRequest) returns (ListAnnouncementResponse);
  rpc FullInfo(AnnouncementId) returns (AnnouncementFullInfo);

  rpc Create(CreateAnnouncementRequest) returns (AnnouncementId);
  rpc Update(UpdateAnnouncementRequest) returns (google.protobuf.Empty);
  rpc Remove(AnnouncementId) returns (google.protobuf.Empty);

  rpc Link(AnnouncementLink) returns (google.protobuf.Empty);
  rpc Unlink(AnnouncementLink) returns (google.protobuf.Empty);

  rpc Publish(AnnouncementId) returns (google.protobuf.Empty);
  rpc Unpublish(AnnouncementId) returns (google.protobuf.Empty);

  rpc ListByContest(AnnouncementLink) returns (ListAnnouncementResponse);
  rpc FullInfoByContest(AnnouncementLink) returns (AnnouncementFullInfo);
}

// Educations
message EducationId { required int32 id = 1; }

message EducationInfo {
  required EducationId id = 1;
  required string title = 2;
}

message EducationFullInfo {
  required EducationInfo info = 1;
  required string content = 2;
  repeated ProblemId problems = 3;
}

message ListEducationResponse {
  repeated EducationInfo list = 1;
  required string next_page_token = 2;
}

message EducationLink {
  required EducationId education_id = 1;
  required ProblemId problem_id = 2;
}

message CreateEducationRequest {
  message Info {
    required string title = 1;
    required string content = 2;
  }
  required Info info = 1;
  required string request_id = 2;
  required ProblemId problem = 3;
}

message UpdateEducationRequest {
  message Info {
    optional string title = 1;
    optional string content = 2;
  }
  required Info info = 1;
  required EducationId id = 2;
  required string request_id = 3;
}

service EducationSet {
  rpc List(ListRequest) returns (ListEducationResponse);
  rpc SearchByText(TextSearchRequest) returns (ListEducationResponse);
  rpc SearchByTag(TextSearchRequest) returns (ListEducationResponse);
  rpc FullInfo(EducationId) returns (EducationFullInfo);

  rpc Create(CreateEducationRequest) returns (google.protobuf.Empty);
  rpc Update(UpdateEducationRequest) returns (google.protobuf.Empty);
  rpc Remove(EducationId) returns (google.protobuf.Empty);

  rpc Link(EducationLink) returns (google.protobuf.Empty);
  rpc Unlink(EducationLink) returns (google.protobuf.Empty);

  rpc FullInfoByProblem(EducationLink) returns (EducationFullInfo);
}

// Problems
message ProblemId { required int32 id = 1; }

message ProblemInfo {
  required ProblemId id = 1;
  required string title = 2;
  required uint32 submit_count = 3;
  required float ac_rate = 4;
}

message ProblemFullInfo {
  required ProblemInfo info = 1;
  required string content = 2;
  required string tags = 8;
  optional EducationId education_id = 3;
  required uint32 difficulty = 4;
  required bool public = 5;
  required uint64 time = 6;
  required uint64 memory = 7;
  required Testcases testcases = 9;
  // bool commit
}

message ListProblemResponse {
  repeated ProblemInfo list = 1;
  required string next_page_token = 2;
}

message ProblemLink {
  required ContestId contest_id = 1;
  required ProblemId problem_id = 2;
}

message CreateProblemRequest {
  message Info {
    required string title = 1;
    required uint32 difficulty = 2;
    required uint64 time = 4;
    required uint64 memory = 5;
    required string tags = 6;
    required string content = 7;
    required MatchRule match_rule = 9;
  };
  required Info info = 1;
  required string request_id = 2;
}

message UpdateProblemRequest {
  message Info {
    optional string title = 1;
    optional uint32 difficulty = 2;
    optional uint64 time = 4;
    optional uint64 memory = 5;
    optional string tags = 6;
    optional string content = 7;
    optional uint32 submit_count = 3;
    optional float ac_rate = 8;
    optional MatchRule match_rule = 10;
  };
  required Info info = 1;
  required ProblemId id = 2;
  required string request_id = 3;
}

service ProblemSet {
  rpc List(ListRequest) returns (ListProblemResponse);
  rpc SearchByText(TextSearchRequest) returns (ListProblemResponse);
  rpc FullInfo(ProblemId) returns (ProblemFullInfo);

  rpc Create(CreateProblemRequest) returns (ProblemId);
  rpc Update(UpdateProblemRequest) returns (google.protobuf.Empty);
  rpc Remove(ProblemId) returns (google.protobuf.Empty);

  rpc Link(ProblemLink) returns (google.protobuf.Empty);
  rpc Unlink(ProblemLink) returns (google.protobuf.Empty);

  rpc Publish(ProblemId) returns (google.protobuf.Empty);
  rpc Unpublish(ProblemId) returns (google.protobuf.Empty);

  rpc FullInfoByContest(ProblemLink) returns (ProblemFullInfo);
  rpc ListByContest(ContestId) returns (ListProblemResponse);
}

// Testcase
message TestcaseId { required int32 id = 1; }

message TestcaseInfo {
  required TestcaseId id = 1;
  required uint32 score = 2;
  repeated Case cases = 3;
}

message TestcaseFullInfo {
  required TestcaseId id = 1;
  required uint32 score = 2;
  repeated bytes inputs = 3;
  repeated bytes outputs = 4;
}

message ListTestcaseResponse {
  repeated TestcaseInfo list = 1;
  required string next_page_token = 2;
}

message TestcaseLink {
  required TestcaseId testcase_id = 1;
  required ProblemId problem_id = 2;
}

message CreateTestcaseRequest {
  message Info {
    required uint32 score = 2;
    optional bytes inputs = 3;
    optional bytes outputs = 4;
  };
  required Info info = 1;
  required string request_id = 2;
}

message UpdateTestcaseRequest {
  message Info {
    optional uint32 score = 2;
    optional bytes inputs = 3;
    optional bytes outputs = 4;
  };
  required Info info = 1;
  required TestcaseId id = 2;
  required string request_id = 3;
}
// Testcase
service TestcaseSet {
  rpc Create(CreateTestcaseRequest) returns (TestcaseId);
  rpc Update(UpdateTestcaseRequest) returns (google.protobuf.Empty);
  rpc Remove(TestcaseId) returns (google.protobuf.Empty);

  rpc Link(TestcaseLink) returns (google.protobuf.Empty);
  rpc Unlink(TestcaseLink) returns (google.protobuf.Empty);

  rpc FullInfoByProblem(TestcaseLink) returns (TestcaseFullInfo);
  rpc ListByProblem(TestcaseLink) returns (ListTestcaseResponse);
}

// Contest
message ContestId { required int32 id = 1; }

message ContestInfo {
  required ContestId id = 1;
  required string title = 2;
  required uint32 participant_count = 3;
  required google.protobuf.Timestamp begin = 4;
  required google.protobuf.Timestamp end = 5;
  required bool need_password = 6;
}

message ContestFullInfo {
  required ContestInfo info = 1;
  required string content = 2;
  required UserId hoster = 3;
  repeated ProblemId problems = 4;
}

message ListContestResponse {
  repeated ContestInfo list = 1;
  required string next_page_token = 2;
}

message CreateContestRequest {
  message Info {
    required string title = 1;
    required google.protobuf.Timestamp begin = 2;
    required google.protobuf.Timestamp end = 3;
    required string content = 4;
    optional string password = 5;
  }
  required Info info = 1;
  required string request_id = 2;
}

message UpdateContestRequest {
  message Info {
    optional string title = 1;
    optional google.protobuf.Timestamp begin = 2;
    optional google.protobuf.Timestamp end = 3;
    optional string content = 4;
    optional string password = 5;
  }
  required Info info = 1;
  required ContestId id = 2;
  required string request_id = 3;
}

message UserRank {
  required UserId user_id = 1;
  required int32 score = 2;
  required uint32 rank = 3;
}

message ListRankResponse {
  repeated UserRank list = 1;
  required string next_page_token = 2;
}

service ContestSet {
  rpc List(ListRequest) returns (ListContestResponse);
  rpc SearchByText(TextSearchRequest) returns (ListContestResponse);
  rpc FullInfo(ContestId) returns (ContestFullInfo);

  rpc Create(CreateContestRequest) returns (google.protobuf.Empty);
  rpc Update(UpdateContestRequest) returns (google.protobuf.Empty);
  rpc Remove(ContestId) returns (google.protobuf.Empty);

  rpc Join(ContestId) returns (google.protobuf.Empty);
  rpc Exit(ContestId) returns (google.protobuf.Empty);

  rpc Rank(ListRequest) returns (ListRankResponse);
}

// User
message UserId { required int32 id = 1; }

message UserInfo {
  required string username = 1;
  required int32 score = 2;
  required UserId id = 3;
}

message UserFullInfo {
  required UserInfo info = 1;
  required bytes hashed_pwd = 2;
}

message ListUserResponse {
  repeated UserInfo list = 1;
  required string next_page_token = 2;
}

message CreateUserRequest {
  message Info {
    required string username = 1;
    required bytes raw_pwd = 2;
  }
  required Info info = 1;
  required UserId id = 2;
}

message UpdateUserRequest {
  message Info {
    optional string username = 1;
    optional bytes raw_pwd = 2;
  }
  required Info info = 1;
  required UserId id = 2;
  required string request_id = 3;
}

service UserSet {
  rpc List(ListRequest) returns (ListUserResponse);
  rpc SearchByText(TextSearchRequest) returns (ListUserResponse);
  rpc FullInfo(UserId) returns (UserFullInfo);

  rpc Create(CreateUserRequest) returns (google.protobuf.Empty);
  rpc Update(UpdateUserRequest) returns (google.protobuf.Empty);
  rpc Remove(UserId) returns (google.protobuf.Empty);
}

message TokenInfo {
  required Token token = 1;
  required bytes permission = 2;
  required google.protobuf.Timestamp expiry = 3;
}

message Token { required bytes signature = 1; }
message Tokens { repeated Token list = 1; }

message LoginRequest {
  required string usertitle = 1;
  required bytes raw_pwd = 2;
}

service TokenSet {
  rpc List(UserId) returns (stream Token);

  rpc Create(LoginRequest) returns (TokenInfo);
  rpc Refresh(Token) returns (TokenInfo);

  rpc Logout(Token) returns (google.protobuf.Empty);
}
