syntax = "proto2";

package oj.backend;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

/*
 * all time are in unit of nanosecond
 * all memory are in unit of byte
 *
 * any rpc with field request_id can be sent multiple time
 * but will only be execute once, the return value will be store and return on
 * preceeding request request_ids for each token should be unique and be a vaild
 * UUIDv4: upper or lower case, with "-" or no "-" is all allowed
 */

// How judge assert input
enum MatchRule {
  // exactly same
  ExactSame = 0;
  // assert segment between space or newline, empty segments are also compare
  IgnoreSNL = 1;
  // assert segment between space or newline, empty segments are ignored
  SkipSNL = 2;
}

// Search
enum SortBy {
  UploadDate = 0;
  ACRate = 1;
  SubmitCount = 2;
  Score = 3;
  Difficulty = 4;
  AcceptCount = 7;
  CreateDate = 8;
  Begin = 9;
  End = 10;
  Committed = 11;
  Time = 12;
  Memory = 13;
  Order = 14;
}

// paginator is used to paginate list
// its usually used with parameter size and offset
// For example, if we have a data with SubmitCount 1 to 20
// (offset, size, reverse) => return value
// (0, 3, false) => 1, 2, 3 # this is the first one(without pagination in use)
// (0, 3, true) => 3, 2, 1
// (4, 3, false) => 5, 6, 7
message Paginator {
  required string session = 1;
  required bool reverse = 2;
}

message ListRequest {
  // Parameters new list paginator
  message Create {
    required SortBy sort_by = 1;
    required bool reverse = 2;
  }
  oneof request {
    Create create = 1;
    Paginator pager = 2;
  }
  required uint64 size = 3;
  optional uint64 offset = 4;
}

message TextSearchRequest {
  oneof request {
    string text = 1;
    Paginator pager = 2;
  }
  required uint64 size = 3;
  optional uint64 offset = 4;
}

message ListByRequest {
  oneof request {
    int32 parent_id = 1;
    Paginator pager = 2;
  }
  required uint64 size = 3;
  optional uint64 offset = 4;
}

message Case {
  repeated bytes inputs = 1;
  repeated bytes outputs = 2;
}

message Testcases { repeated TestcaseId list = 1; }

// Submit

// I don't want to write docs
enum StateCode {
  AC = 0;
  NA = 1;
  WA = 2;
  CE = 3;
  RE = 4;
  RF = 5;
  TLE = 6;
  MLE = 7;
  OLE = 8;
}
message JudgeResult {
  required StateCode code = 1;
  optional uint64 accuracy = 2;
  optional uint64 time = 3;
  optional uint64 memory = 4;
}

message SubmitId { required int32 id = 1; }

message SubmitUpload {
  required SubmitId id = 1;
  required bytes code = 2;
}

message SubmitInfo {
  required SubmitId id = 1;
  required google.protobuf.Timestamp upload_time = 3;
  required uint32 score = 6;
  required JudgeResult state = 7;
}

message ListSubmitResponse {
  repeated SubmitInfo list = 1;
  required string next_session = 2;
}

message SubmitStatus {
  oneof task {
    // number of test case running(or finished)
    int32 case = 1;
    JudgeResult result = 2;
  }
}

message CreateSubmitRequest {
  message Info {
    required bytes code = 1;
    required ProblemId problem_id = 2;
    required string lang = 3;
  }
  required Info info = 1;
  // required SubmitId id = 2;
  required ProblemId problem = 3;
  required string request_id = 4;
}

message RejudgeRequest {
  required SubmitId id = 1;
  required string request_id = 2;
}

message Language {
  required string lang_uid = 1;
  required string lang_name = 2;
  required string info = 3;
  required string lang_ext = 4;
}

service SubmitSet {
  rpc List(ListRequest) returns (ListSubmitResponse);
  rpc Info(SubmitId) returns (SubmitInfo);

  rpc Create(CreateSubmitRequest) returns (SubmitId);
  rpc Remove(SubmitId) returns (google.protobuf.Empty);

  // list submit by problem, sorted by order(increasing)
  rpc ListByProblem(ListByRequest) returns (ListSubmitResponse);

  // are not guarantee to yield status
  rpc Follow(SubmitId) returns (stream SubmitStatus);
  rpc Rejudge(RejudgeRequest) returns (google.protobuf.Empty);

  rpc ListLangs(google.protobuf.Empty) returns (stream Language);
}

// Announcements
message AnnouncementId { required int32 id = 1; }

message AnnouncementInfo {
  required AnnouncementId id = 1;
  required string title = 2;
  required google.protobuf.Timestamp upload_date = 3;
}

message AnnouncementFullInfo {
  required AnnouncementInfo info = 1;
  required UserId author = 2;
  required string content = 3;
  required bool public = 4;
}

message ListAnnouncementResponse {
  repeated AnnouncementInfo list = 1;
  required string next_session = 2;
}

message AnnouncementLink {
  required AnnouncementId announcement_id = 1;
  required ContestId contest_id = 2;
}

message CreateAnnouncementRequest {
  message Info {
    required string title = 1;
    required string content = 2;
  }
  required Info info = 1;
  required string request_id = 2;
}

message UpdateAnnouncementRequest {
  message Info {
    optional string title = 1;
    optional string content = 2;
  }
  required Info info = 1;
  required AnnouncementId id = 2;
  required string request_id = 3;
}

service AnnouncementSet {
  rpc List(ListRequest) returns (ListAnnouncementResponse);
  rpc SearchByText(TextSearchRequest) returns (ListAnnouncementResponse);
  rpc FullInfo(AnnouncementId) returns (AnnouncementFullInfo);

  rpc Create(CreateAnnouncementRequest) returns (AnnouncementId);
  rpc Update(UpdateAnnouncementRequest) returns (google.protobuf.Empty);
  rpc Remove(AnnouncementId) returns (google.protobuf.Empty);

  rpc Link(AnnouncementLink) returns (google.protobuf.Empty);
  rpc Unlink(AnnouncementLink) returns (google.protobuf.Empty);

  rpc Publish(AnnouncementId) returns (google.protobuf.Empty);
  rpc Unpublish(AnnouncementId) returns (google.protobuf.Empty);

  // paginate by id(increasing)
  rpc ListByContest(ListByRequest) returns (ListAnnouncementResponse);
  rpc FullInfoByContest(AnnouncementLink) returns (AnnouncementFullInfo);
}

/*
 * about entity hierarchy(I named it!)
 * There are a lot of entity pair which have a parent-child relationship
 * For example, you can only view a unpublish problem if you are in a contest
 * with it
 *
 * So, for entity that can expose sololy, we call it a top-level entity
 * Top level entity are: Contest, User, Announcement, Problem
 * all entity(including top-level entity) have rpc like SearchBy[A-Z]{1}[a-z]+
 */

// Educations
message EducationId { required int32 id = 1; }

message EducationInfo {
  required EducationId id = 1;
  required string title = 2;
}

message EducationFullInfo {
  required EducationInfo info = 1;
  required string content = 2;
  optional ProblemId problem = 4;
}

message ListEducationResponse {
  repeated EducationInfo list = 1;
  required string next_session = 2;
}

message EducationLink {
  required EducationId education_id = 1;
  required ProblemId problem_id = 2;
}

message CreateEducationRequest {
  message Info {
    required string title = 1;
    required string content = 2;
  }
  required Info info = 1;
  required string request_id = 2;
}

message UpdateEducationRequest {
  message Info {
    optional string title = 1;
    optional string content = 2;
  }
  required Info info = 1;
  required EducationId id = 2;
  required string request_id = 3;
}

service EducationSet {
  rpc Create(CreateEducationRequest) returns (EducationId);
  rpc Update(UpdateEducationRequest) returns (google.protobuf.Empty);
  rpc Remove(EducationId) returns (google.protobuf.Empty);

  rpc Link(EducationLink) returns (google.protobuf.Empty);
  rpc Unlink(EducationLink) returns (google.protobuf.Empty);

  // paginate by id(increasing)
  rpc ListByProblem(ListByRequest) returns (ListEducationResponse);
  rpc FullInfoByProblem(EducationLink) returns (EducationFullInfo);
}

// Problems
message ProblemId { required int32 id = 1; }

message ProblemInfo {
  required ProblemId id = 1;
  required string title = 2;
  required uint32 submit_count = 3;
  required float ac_rate = 4;
}

message ProblemFullInfo {
  required ProblemInfo info = 1;
  required string content = 2;
  required string tags = 8;
  required uint32 difficulty = 4;
  required bool public = 5;
  required uint64 time = 6;
  required uint64 memory = 7;
}

message ListProblemResponse {
  repeated ProblemInfo list = 1;
  required string next_session = 2;
}

message ProblemLink {
  required ContestId contest_id = 1;
  required ProblemId problem_id = 2;
}

message CreateProblemRequest {
  message Info {
    required string title = 1;
    required uint32 difficulty = 2;
    required uint64 time = 4;
    required uint64 memory = 5;
    required string tags = 6;
    required string content = 7;
    required MatchRule match_rule = 9;
    required float order = 10;
  };
  required Info info = 1;
  required string request_id = 2;
}

message UpdateProblemRequest {
  message Info {
    optional string title = 1;
    optional uint32 difficulty = 2;
    optional uint64 time = 4;
    optional uint64 memory = 5;
    optional string tags = 6;
    optional string content = 7;
    optional MatchRule match_rule = 10;
    optional uint32 submit_count = 3;
    optional float ac_rate = 8;
    optional float order = 11;
  };
  required Info info = 1;
  required ProblemId id = 2;
  required string request_id = 3;
}

service ProblemSet {
  rpc List(ListRequest) returns (ListProblemResponse);
  rpc SearchByText(TextSearchRequest) returns (ListProblemResponse);
  rpc FullInfo(ProblemId) returns (ProblemFullInfo);

  rpc Create(CreateProblemRequest) returns (ProblemId);
  rpc Update(UpdateProblemRequest) returns (google.protobuf.Empty);
  rpc Remove(ProblemId) returns (google.protobuf.Empty);

  rpc Link(ProblemLink) returns (google.protobuf.Empty);
  rpc Unlink(ProblemLink) returns (google.protobuf.Empty);

  rpc Publish(ProblemId) returns (google.protobuf.Empty);
  rpc Unpublish(ProblemId) returns (google.protobuf.Empty);

  rpc FullInfoByContest(ProblemLink) returns (ProblemFullInfo);
  // paginate by order(increasing)
  rpc ListByContest(ListByRequest) returns (ListProblemResponse);
}

// Testcase
message TestcaseId { required int32 id = 1; }

message TestcaseInfo {
  required TestcaseId id = 1;
  required uint32 score = 2;
}

message TestcaseFullInfo {
  required TestcaseId id = 1;
  required uint32 score = 2;
  required bytes inputs = 3;
  required bytes outputs = 4;
}

message ListTestcaseResponse {
  repeated TestcaseInfo list = 1;
  required string next_session = 2;
}

message TestcaseLink {
  required TestcaseId testcase_id = 1;
  required ProblemId problem_id = 2;
}

message CreateTestcaseRequest {
  message Info {
    required uint32 score = 2;
    required bytes input = 3;
    required bytes output = 4;
  };
  required Info info = 1;
  required string request_id = 2;
}

message UpdateTestcaseRequest {
  message Info {
    optional uint32 score = 2;
    optional bytes input = 3;
    optional bytes output = 4;
  };
  required Info info = 1;
  required TestcaseId id = 2;
  required string request_id = 3;
}
// Testcase
service TestcaseSet {
  // list owned testcase
  rpc List(ListRequest) returns (ListTestcaseResponse);
  rpc Create(CreateTestcaseRequest) returns (TestcaseId);
  rpc Update(UpdateTestcaseRequest) returns (google.protobuf.Empty);
  rpc Remove(TestcaseId) returns (google.protobuf.Empty);

  rpc Link(TestcaseLink) returns (google.protobuf.Empty);
  rpc Unlink(TestcaseLink) returns (google.protobuf.Empty);

  rpc FullInfoByProblem(TestcaseLink) returns (TestcaseFullInfo);
  // paginate by id(increasing)
  rpc ListByProblem(ListByRequest) returns (ListTestcaseResponse);
}

// Contest
message ContestId { required int32 id = 1; }

message ContestInfo {
  required ContestId id = 1;
  required string title = 2;
  required google.protobuf.Timestamp begin = 4;
  required google.protobuf.Timestamp end = 5;
  required bool need_password = 6;
}

message ContestFullInfo {
  required ContestInfo info = 1;
  required string content = 2;
  required UserId hoster = 3;
}

message ListContestResponse {
  repeated ContestInfo list = 1;
  required string next_session = 2;
}

message CreateContestRequest {
  message Info {
    required string title = 1;
    required google.protobuf.Timestamp begin = 2;
    required google.protobuf.Timestamp end = 3;
    required string tags = 6;
    required string content = 4;
    optional string password = 5;
  }
  required Info info = 1;
  required string request_id = 2;
}

message UpdateContestRequest {
  message Info {
    optional string title = 1;
    optional google.protobuf.Timestamp begin = 2;
    optional google.protobuf.Timestamp end = 3;
    optional string content = 4;
    optional string tags = 6;
    // if there is password: enter original password to disable password, null
    // to keep password if there isn't: enter new password to set password, null
    // to keep it password disable
    optional string password = 5;
  }
  required Info info = 1;
  required ContestId id = 2;
  required string request_id = 3;
}

message UserRank {
  required UserId user_id = 1;
  required uint32 score = 2;
}

message ListRankResponse {
  repeated UserRank list = 1;
  required string next_session = 2;
}

message JoinContestRequest {
  required ContestId id = 1;
  optional string password = 2;
}

message Users { repeated UserRank list = 1; }

service ContestSet {
  rpc List(ListRequest) returns (ListContestResponse);
  rpc SearchByText(TextSearchRequest) returns (ListContestResponse);
  rpc FullInfo(ContestId) returns (ContestFullInfo);

  rpc Create(CreateContestRequest) returns (ContestId);
  rpc Update(UpdateContestRequest) returns (google.protobuf.Empty);
  rpc Remove(ContestId) returns (google.protobuf.Empty);

  rpc Join(JoinContestRequest) returns (google.protobuf.Empty);
  rpc Exit(ContestId) returns (google.protobuf.Empty);

  // return up to 10 user
  rpc Rank(ContestId) returns (Users);
}

// User
message UserId { required int32 id = 1; }

message UserInfo {
  required string username = 1;
  required uint32 score = 2;
  required UserId id = 3;
}

message UserFullInfo {
  required UserInfo info = 1;
  required bytes hashed_pwd = 2;
}

message ListUserResponse {
  repeated UserInfo list = 1;
  required string next_session = 2;
}

message CreateUserRequest {
  message Info {
    required string username = 1;
    required string password = 2;
    required Permission permission = 3;
  }
  required Info info = 1;
  required string request_id = 3;
}

message Permission {
  required bool can_root = 6;
  required bool can_manage_problem = 2;
  required bool can_manage_education = 4;
  required bool can_manage_announcement = 3;
  required bool can_manage_submit = 1;
  required bool can_publish = 8;
  required bool can_link = 7;
  required bool can_manage_contest = 9;
  required bool can_manage_user = 5;
  required bool can_imgur = 10;
  required bool can_manage_chat = 11;
}

message UpdateUserRequest {
  message Info {
    optional string username = 1;
    optional string password = 2;
    optional Permission permission = 3;
  }
  required Info info = 1;
  required UserId id = 2;
  required string request_id = 3;
}

message UpdatePasswordRequest {
  required string username = 1;
  required string password = 2;
}

service UserSet {
  rpc List(ListRequest) returns (ListUserResponse);
  rpc SearchByText(TextSearchRequest) returns (ListUserResponse);
  rpc FullInfo(UserId) returns (UserFullInfo);

  rpc Create(CreateUserRequest) returns (UserId);
  rpc Update(UpdateUserRequest) returns (google.protobuf.Empty);
  rpc Remove(UserId) returns (google.protobuf.Empty);

  rpc UpdatePassword(UpdatePasswordRequest) returns (google.protobuf.Empty);
}

message TokenInfo {
  required Token token = 1;
  required Permission permission = 2;
  required google.protobuf.Timestamp expiry = 3;
}

message Token { required string signature = 1; }
message Tokens { repeated Token list = 1; }

message LoginRequest {
  required string username = 1;
  required string password = 2;
  // in second
  optional uint64 expiry = 3;
}

service TokenSet {
  rpc List(UserId) returns (Tokens);

  rpc Create(LoginRequest) returns (TokenInfo);
  rpc Refresh(google.protobuf.Timestamp) returns (TokenInfo);

  rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message PlaygroundRequest {
  required bytes code = 1;
  required string lang = 2;
  required bytes input = 3;
}

message Log {
  required uint32 level = 1;
  required string msg = 2;
}

message PlaygroundResult {
  oneof result {
    Log compile = 1;
    bytes output = 2;
  }
}

service PlaygroundSet {
  rpc Run(PlaygroundRequest) returns (stream PlaygroundResult);
}

message UploadRequest {
  required bytes data = 1;
  required string request_id = 2;
}

message UploadResponse { required string url = 1; }

service ImgurSet { rpc Upload(UploadRequest) returns (UploadResponse); }

message ChatId{
  required int32 id = 1;
}

message ChatInfo {
  required ChatId id=5;
  required UserId user_id = 1;
  required ProblemId problem_id = 2;
  required google.protobuf.Timestamp create_at = 3;
  required string message = 4;
}

message ListChatResponse {
  repeated ChatInfo list = 1;
  required string next_session = 2;
}

message CreateChatRequest{
  required ProblemId problem_id=1;
  required string message=2;
  required string request_id = 6;
}

service ChatSet {
  // unlike other entity, there is no such permission as manage_chat
  // everyone(except guest) can create chat
  rpc Create(CreateChatRequest) returns (ChatId);
  rpc Remove(ChatId) returns (google.protobuf.Empty);

  // paginate by id in increasing order
  rpc ListByProblem(ListByRequest) returns (ListChatResponse);
}
