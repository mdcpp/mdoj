syntax = "proto3";

package oj.judger;

import "google/protobuf/empty.proto";

message JudgeRequest {
  string lang_uid = 1;
  bytes code = 2;
  // memory limit in byte
  uint64 memory = 3;
  // time limit in nanosecond
  uint64 time = 4;
  JudgeMatchRule rule = 5;
  // len must > 0
  repeated TestIO tests = 6;
}

message TestIO {
  bytes input = 1;
  bytes output = 2;
}

message JudgeResponse {
  oneof task {
    // number of test case running(or finished)
    int32 case = 1;
    JudgeResult result = 2;
  }
}

message JudgeResult {
  // assertion code
  JudgeResultState status = 1;
  // the time in nanosecond
  optional uint64 max_time = 2;
  // the peak memory usage
  optional uint64 max_mem = 3;
}

enum JudgeResultState {
  // Accepted
  AC = 0;
  // Unknown
  NA = 1;
  // Wrong Answer
  WA = 2;
  // Compile Error
  CE = 3;
  // Runtime Error
  RE = 4;
  // Restricted Function
  RF = 5;
  // Time Limit Exceeded
  TLE = 6;
  // Memory Limit Exceeded
  MLE = 7;
  // Output Limit Exceeded
  OLE = 8;
}

// How judge assert input
enum JudgeMatchRule {
  // exactly same
  ExactSame = 0;
  // assert segment between space or newline, empty segments are also compare
  IgnoreSNL = 1;
  // assert segment between space or newline, empty segments are ignored
  SkipSNL = 2;
}

message Langs { repeated LangInfo list = 1; }

// info of a language(extension)
message LangInfo {
  // unique id
  string lang_uid = 1;
  // human readable name
  string lang_name = 2;
  // human readable description
  string info = 3;
  // file extension of the language
  string lang_ext = 4;
}

message JudgeInfo {
  // max support memory in byte
  uint64 memory = 1;
  // max possible deviation in nanosecond
  uint64 accuracy = 2;
  // list of supported languages(extension)
  Langs langs = 3;
  // cpu factor, the total time limit is calculated by time * cpu_factor
  float cpu_factor = 4;
}

service Judger {
  // Send Code for judge
  rpc Judge(JudgeRequest) returns (stream JudgeResponse);
  // Get judger info, useful for getting supported language and load balancing
  rpc JudgerInfo(google.protobuf.Empty) returns (JudgeInfo);
}
