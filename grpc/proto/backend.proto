
syntax = "proto2";

package oj.backend;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

enum Order {
  ORDER_DESCEND = 1;
  ORDER_ASCEND = 2;
}

message Id { required int32 id = 1; }

enum Role {
  ROLE_USER = 1;
  ROLE_SUPER = 2;
  ROLE_ADMIN = 3;
  ROLE_ROOT = 4;
}

enum StateCode {
  STATE_CODE_ACCEPTED = 0;
  STATE_CODE_UNKNOWN = 1;
  STATE_CODE_WRONG_ANSWER = 2;
  STATE_CODE_COMPILE_ERROR = 3;
  STATE_CODE_RUNTIME_ERROR = 4;
  STATE_CODE_RESTRICTED_FUNCTION = 5;
  STATE_CODE_TIME_LIMIT_EXCESS = 6;
  STATE_CODE_MEMORY_LIMIT_EXCESS = 7;
  STATE_CODE_OUTPUT_LIMIT_EXCESS = 8;
}

message JudgeResult {
  required StateCode code = 1;
  optional uint64 accuracy = 2;
  optional uint64 time = 3;
  optional uint64 memory = 4;
}

// How judge assert input
enum MatchRule {
  // exactly same
  MATCHRULE_EXACTLY = 0;
  // assert segment between space or newline, empty segments are also compare
  MATCHRULE_IGNORE_SNL = 1;
  // assert segment between space or newline, empty segments are ignored
  MATCHRULE_SKIP_SNL = 2;
}

message RemoveRequest {
  required int32 id = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message PublishRequest {
  required int32 id = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message AddProblemToContestRequest {
  required int32 contest_id = 1;
  required int32 problem_id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListProblemByContestRequest {
  required int32 contest_id = 1;
  required int32 problem_id = 2;
}

message CreateProblemRequest {
  message Info {
    required string title = 1;
    // 0    -  500 easy
    // 500  - 1000 easy+
    // 1000 - 1500 medium
    // 1500 - 2000 medium+
    // 2000 - 2500 hard
    // 2500 - 3000 hard+
    // 3000 - inf  geek
    required uint32 difficulty = 2;
    // in nanosecond
    required uint64 time = 4;
    // in byte (8 bits)
    required uint64 memory = 5;
    // tags split by unicode whitespace
    // https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace
    required string tags = 6;
    required string content = 7;
    required MatchRule match_rule = 9;
    required float order = 10;
  };
  required Info info = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message UpdateProblemRequest {
  message Info {
    optional string title = 1;
    // 0    -  500 easy
    // 500  - 1000 easy+
    // 1000 - 1500 medium
    // 1500 - 2000 medium+
    // 2000 - 2500 hard
    // 2500 - 3000 hard+
    // 3000 - inf  geek
    optional uint32 difficulty = 2;
    // in nanosecond
    optional uint64 time = 4;
    // in byte (8 bits)
    optional uint64 memory = 5;
    // tags split by unicode whitespace
    // https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace
    optional string tags = 6;
    optional string content = 7;
    optional MatchRule match_rule = 10;
    optional float order = 11;
  };
  required Info info = 1;
  required int32 id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ProblemInfo {
  required int32 id = 1;
  required string title = 2;
  required uint32 submit_count = 3;
  // 0    -  500 easy
  // 500  - 1000 easy+
  // 1000 - 1500 medium
  // 1500 - 2000 medium+
  // 2000 - 2500 hard
  // 2500 - 3000 hard+
  // 3000 - inf  geek
  required uint32 difficulty = 5;
  required float ac_rate = 4;
}

message ProblemFullInfo {
  required ProblemInfo info = 1;
  required string content = 2;
  // tags are split by ascii whitespace
  required string tags = 8;
  // 0    -  500 easy
  // 500  - 1000 easy+
  // 1000 - 1500 medium
  // 1500 - 2000 medium+
  // 2000 - 2500 hard
  // 2500 - 3000 hard+
  // 3000 - inf  geek
  required uint32 difficulty = 4;
  required bool public = 5;
  required uint64 time = 6;
  required uint64 memory = 7;
  required int32 author = 9;
  required bool writable = 10;
}

message ListProblemRequest {
  enum Sort {
    SORT_UPDATE_DATE = 0;
    SORT_CREATE_DATE = 1;
    SORT_AC_RATE = 2;
    SORT_SUBMIT_COUNT = 3;
    SORT_DIFFICULTY = 4;
    SORT_ORDER = 5;
    SORT_PUBLIC = 6;
  }
  message Query {
    optional int32 contest_id = 1;
    optional Sort sort_by = 2;
    optional string text = 3;
  }
  message Create {
    required Order order = 1;
    optional Query query = 2;
  }

  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

message ListProblemResponse {
  repeated ProblemInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message InsertProblemRequest{
  optional string request_id = 1;
  optional int32 pivot_id = 2;
  required int32 problem_id = 3;
  required int32 contest_id = 4;
}

service Problem {
  rpc List(ListProblemRequest) returns (ListProblemResponse);
  rpc FullInfo(Id) returns (ProblemFullInfo);

  rpc Create(CreateProblemRequest) returns (Id);
  rpc Update(UpdateProblemRequest) returns (google.protobuf.Empty);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc AddToContest(AddProblemToContestRequest) returns (google.protobuf.Empty);
  rpc RemoveFromContest(AddProblemToContestRequest)
      returns (google.protobuf.Empty);
  rpc Insert(InsertProblemRequest) returns (google.protobuf.Empty);

  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  rpc Unpublish(PublishRequest) returns (google.protobuf.Empty);

  rpc FullInfoByContest(ListProblemByContestRequest) returns (ProblemFullInfo);
}

message SubmitInfo {
  required int32 id = 1;
  required google.protobuf.Timestamp upload_time = 3;
  required uint32 score = 6;
  required JudgeResult state = 7;
}

message SubmitStatus {
  oneof task {
    int32 case = 1;
    StateCode result = 2;
  }
}

message CreateSubmitRequest {
  required string lang_uid = 3;
  required int32 problem_id = 2;
  required bytes code = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 4;
}

message RejudgeRequest {
  required int32 submit_id = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message ListSubmitRequest {
  message Create {
    required Order order = 1;
    optional int32 problem_id = 2;
  }
  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

message ListSubmitResponse {
  repeated SubmitInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

service Submit {
  rpc List(ListSubmitRequest) returns (ListSubmitResponse);
  rpc Info(Id) returns (SubmitInfo);

  rpc Create(CreateSubmitRequest) returns (Id);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  // are not guarantee to yield status(not consistent across request)
  rpc Follow(Id) returns (stream SubmitStatus);
  rpc Rejudge(RejudgeRequest) returns (google.protobuf.Empty);

  rpc ListLang(google.protobuf.Empty) returns (Languages);
}

message AnnouncementInfo {
  required int32 id = 1;
  required string title = 2;
  required google.protobuf.Timestamp update_date = 3;
}

message AnnouncementFullInfo {
  required AnnouncementInfo info = 1;
  required int32 author_id = 2;
  required string content = 3;
  required bool public = 4;
  required bool writable = 5;
}

message ListAnnouncementResponse {
  repeated AnnouncementInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message AddAnnouncementToContestRequest {
  required int32 announcement_id = 1;
  required int32 contest_id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListAnnouncementByContestRequest {
  required int32 announcement_id = 1;
  required int32 contest_id = 2;
}

message CreateAnnouncementRequest {
  message Info {
    required string title = 1;
    required string content = 2;
  }
  required Info info = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message UpdateAnnouncementRequest {
  message Info {
    optional string title = 1;
    optional string content = 2;
  }
  required Info info = 1;
  required int32 id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListAnnouncementRequest {
  enum Sort {
    SORT_UPDATE_DATE = 0;
    SORT_CREATE_DATE = 1;
    SORT_PUBLIC = 2;
  }
  message Query {
    optional Sort sort_by = 1;
    optional string text = 2;
    optional int32 contest_id = 3;
  }
  message Create {
    required Order order = 1;
    optional Query query = 2;
  }

  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

service Announcement {
  rpc List(ListAnnouncementRequest) returns (ListAnnouncementResponse);
  rpc FullInfo(Id) returns (AnnouncementFullInfo);
  rpc FullInfoByContest(ListAnnouncementByContestRequest)
      returns (AnnouncementFullInfo);

  rpc Create(CreateAnnouncementRequest) returns (Id);
  rpc Update(UpdateAnnouncementRequest) returns (google.protobuf.Empty);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc AddToContest(AddAnnouncementToContestRequest)
      returns (google.protobuf.Empty);
  rpc RemoveFromContest(AddAnnouncementToContestRequest)
      returns (google.protobuf.Empty);

  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  rpc Unpublish(PublishRequest) returns (google.protobuf.Empty);
}

message EducationInfo {
  required int32 id = 1;
  required string title = 2;
}

message EducationFullInfo {
  required EducationInfo info = 1;
  required string content = 2;
  optional int32 problem = 4;
  required bool writable = 5;
}

message ListEducationResponse {
  repeated EducationInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message AddEducationToProblemRequest {
  required int32 education_id = 1;
  required int32 problem_id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_ID = 3;
}

message ListEducationByProblemRequest {
  required int32 education_id = 1;
  required int32 problem_id = 2;
}

message CreateEducationRequest {
  message Info {
    required string title = 1;
    required string content = 2;
  }
  required Info info = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message UpdateEducationRequest {
  message Info {
    optional string title = 1;
    optional string content = 2;
  }
  required Info info = 1;
  required int32 id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListEducationRequest {
  message Create {
    required Order order = 1;
    optional Query query = 2;
  }
  message Query {
    optional string text = 2;
    optional int32 problem_id = 3;
  }
  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

service Education {
  rpc List(ListEducationRequest) returns (ListEducationResponse);

  rpc Create(CreateEducationRequest) returns (Id);
  rpc Update(UpdateEducationRequest) returns (google.protobuf.Empty);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc AddToProblem(AddEducationToProblemRequest)
      returns (google.protobuf.Empty);
  rpc RemoveFromProblem(AddEducationToProblemRequest)
      returns (google.protobuf.Empty);

  rpc FullInfoByProblem(ListEducationByProblemRequest)
      returns (EducationFullInfo);
}

message TestcaseInfo {
  required int32 id = 1;
  required uint32 score = 2;
}

message TestcaseFullInfo {
  required int32 id = 1;
  required uint32 score = 2;
  required bytes inputs = 3;
  required bytes outputs = 4;
  required bool writable = 5;
}

message ListTestcaseResponse {
  repeated TestcaseInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message AddTestcaseToProblemRequest {
  required int32 testcase_id = 1;
  required int32 problem_id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListTestcaseByProblemRequest {
  required int32 testcase_id = 1;
  required int32 problem_id = 2;
}

message CreateTestcaseRequest {
  message Info {
    required uint32 score = 2;
    required bytes input = 3;
    required bytes output = 4;
  };
  required Info info = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message UpdateTestcaseRequest {
  message Info {
    optional uint32 score = 2;
    optional bytes input = 3;
    optional bytes output = 4;
  };
  required Info info = 1;
  required int32 id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListTestcaseRequest {
  message Create {
    required Order order = 1;
    optional int32 problem_id = 2;
  }
  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

message InsertTestcaseRequest{
  optional string request_id = 1;
  optional int32 pivot_id = 2;
  required int32 testcase_id = 3;
  required int32 problem_id = 4;
}

// Testcase
service Testcase {
  // list owned testcase
  rpc List(ListTestcaseRequest) returns (ListTestcaseResponse);
  rpc Create(CreateTestcaseRequest) returns (Id);
  rpc Update(UpdateTestcaseRequest) returns (google.protobuf.Empty);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc AddToProblem(AddTestcaseToProblemRequest) returns (google.protobuf.Empty);
  rpc RemoveFromProblem(AddTestcaseToProblemRequest)
      returns (google.protobuf.Empty);

  rpc Insert(InsertTestcaseRequest) returns (google.protobuf.Empty);

  rpc FullInfoByProblem(ListTestcaseByProblemRequest)
      returns (TestcaseFullInfo);
}

message ContestInfo {
  required int32 id = 1;
  required string title = 2;
  required google.protobuf.Timestamp begin = 4;
  required google.protobuf.Timestamp end = 5;
  required bool need_password = 6;
}

message ContestFullInfo {
  required ContestInfo info = 1;
  required string content = 2;
  required int32 host = 3;
  required bool writable = 5;
}

message ListContestResponse {
  repeated ContestInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message CreateContestRequest {
  message Info {
    required string title = 1;
    required google.protobuf.Timestamp begin = 2;
    required google.protobuf.Timestamp end = 3;
    required string tags = 6;
    required string content = 4;
    optional string password = 5;
  }
  required Info info = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message UpdateContestRequest {
  message Info {
    optional string title = 1;
    optional google.protobuf.Timestamp begin = 2;
    optional google.protobuf.Timestamp end = 3;
    optional string content = 4;
    optional string tags = 6;
    // if there is password: enter original password to disable password, null
    // to keep password. if there isn't: enter new password to set password,
    // null to keep it password disable
    optional string password = 5;
  }
  required Info info = 1;
  required int32 id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message UserRank {
  required int32 user_id = 1;
  required uint32 score = 2;
}

message ListRankResponse {
  repeated UserRank list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message JoinContestRequest {
  required int32 id = 1;
  optional string password = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message ListContestRequest {
  enum Sort {
    SORT_CREATE_DATE = 0;
    SORT_UPDATE_DATE = 1;
    SORT_BEGIN = 2;
    SORT_END = 3;
    SORT_PUBLIC = 4;
  }
  message Query {
    optional Sort sort_by = 1;
    optional string text = 2;
  }
  message Create {
    required Order order = 1;
    optional Query query = 2;
  }

  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

message Users { repeated UserRank list = 1; }

service Contest {
  rpc List(ListContestRequest) returns (ListContestResponse);
  rpc FullInfo(Id) returns (ContestFullInfo);

  rpc Create(CreateContestRequest) returns (Id);
  rpc Update(UpdateContestRequest) returns (google.protobuf.Empty);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  rpc Unpublish(PublishRequest) returns (google.protobuf.Empty);

  rpc Join(JoinContestRequest) returns (google.protobuf.Empty);
}

message UserInfo {
  required string username = 1;
  required uint64 score = 4;
  required int32 id = 3;
}

message UserFullInfo {
  required UserInfo info = 1;
  required bytes hashed_pwd = 2;
  required bool writable = 3;
}

message ListUserResponse {
  repeated UserInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message CreateUserRequest {
  message Info {
    required string username = 1;
    required string password = 2;
    required Role role = 4;
  }
  required Info info = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message UpdateUserRequest {
  message Info {
    optional string username = 1;
    optional string password = 2;
    optional Role role = 3;
  }
  required Info info = 1;
  required int32 id = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 3;
}

message UpdatePasswordRequest {
  required string username = 1;
  required string password = 2;
  required string new_password = 3;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 4;
}

message ListUserRequest {
  enum Sort {
    SORT_CREATE_DATE = 0;
    SORT_SCORE = 1;
  }
  message Query {
    optional Sort sort_by = 1;
    optional string text = 2;
    optional int32 contest_id = 3;
  }
  message Create {
    required Order order = 1;
    optional Query query = 2;
  }

  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

service User {
  rpc List(ListUserRequest) returns (ListUserResponse);
  rpc FullInfo(Id) returns (UserFullInfo);

  rpc Create(CreateUserRequest) returns (Id);
  rpc Update(UpdateUserRequest) returns (google.protobuf.Empty);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc UpdatePassword(UpdatePasswordRequest) returns (google.protobuf.Empty);

  rpc MyInfo(google.protobuf.Empty) returns (UserFullInfo);
}

message TokenInfo {
  required string token = 1;
  required Role role = 2;
  required google.protobuf.Timestamp expiry = 3;
}

message LoginRequest {
  required string username = 1;
  required string password = 2;
  optional uint64 expiry = 3;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 4;
}

message RefreshRequest {
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 1;
  optional uint64 expiry = 2;
}

message ListTokenRequest {
  oneof request {
    Order create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

message ListTokenResponse {
  repeated TokenInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

service Token {
  rpc List(ListTokenRequest) returns (ListTokenResponse);

  rpc Create(LoginRequest) returns (TokenInfo);
  rpc Refresh(RefreshRequest) returns (TokenInfo);

  rpc Logout(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message ChatInfo {
  required int32 id = 5;
  required int32 user_id = 1;
  required int32 problem_id = 2;
  required google.protobuf.Timestamp create_at = 3;
  required string message = 4;
  required bool writable = 6;
}

message ListChatResponse {
  repeated ChatInfo list = 1;
  required string paginator = 2;
  required uint64 remain = 3;
}

message CreateChatRequest {
  required int32 problem_id = 1;
  required string message = 2;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 6;
}

message ListChatRequest {
  message Create {
    required Order order = 1;
    required int32 problem_id = 3;
  }
  oneof request {
    Create create = 1;
    string paginator = 2;
  }
  required uint64 size = 3;
  required int64 offset = 4;
}

service Chat {
  // unlike other entity, there is no such role as manage_chat
  // everyone(except guest) can create chat
  rpc Create(CreateChatRequest) returns (Id);
  rpc Remove(RemoveRequest) returns (google.protobuf.Empty);

  rpc List(ListChatRequest) returns (ListChatResponse);
}

message UploadRequest {
  required bytes data = 1;
  // can prevent duplicate request.
  // It will return cache result if server the request with the same
  // `request_id` has be processed.
  optional string request_id = 2;
}

message UploadResponse { required string url = 1; }

service Image { rpc Upload(UploadRequest) returns (UploadResponse); }

message Language {
  // uuid of this language
  required string lang_uid = 1;
  // extra info about this language
  required string lang_name = 2;
  // extra info about this language
  required string info = 3;
  // file extension of this language
  required string lang_ext = 4;
}
message Languages { repeated Language list = 1; }
